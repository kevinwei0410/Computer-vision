# -*- coding: utf-8 -*-
"""DEMO deepdream.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fPE3OeM3i-5BmPjtjKf7msIM39fq9jPF
"""

from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
import matplotlib.pyplot as plt
import PIL.Image
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow import keras

import requests
from io import BytesIO


def deprocess(img):
    img = tf.constant(255.0)*(img + tf.constant(1.0))/tf.constant(2.0)
    return tf.cast(img, tf.uint8)


def define_deepdream(base_model,names=None):        
    if names is None:
        names  = ['mixed3', 'mixed5']        
    
    out   = tf.squeeze(tf.add_n([tf.reduce_mean(base_model.get_layer(name).output,keepdims=True) for name in names]))

    model = tf.keras.Model(inputs=base_model.input,outputs=out)
    
    return model


def calc_loss(img, variation_weight=1.0e-7):
    global dream_model
    return dream_model(img[tf.newaxis,:]) + tf.constant(variation_weight)*tf.image.total_variation(img)

@tf.function(
      input_signature=(
        tf.TensorSpec(shape=[None,None,3], dtype=tf.float32),
        tf.TensorSpec(shape=[], dtype=tf.int32),
        tf.TensorSpec(shape=[], dtype=tf.float32),)    
)
def gradient_ascent(img, steps, step_size):
    loss = tf.constant(0.0,dtype=tf.float32)
    for n in tf.range(steps):
        with tf.GradientTape() as tape:
            tape.watch(img)
            loss = calc_loss(img)
        gradients = tape.gradient(loss, img)
        # Normalize the gradients.
        gradients /= tf.math.reduce_std(gradients) + 1e-8 

        img = img + gradients*step_size # Gradient ascent
        img = tf.clip_by_value(img, -1, 1)

    return loss, img

base_model = tf.keras.applications.InceptionV3(include_top=False, weights='imagenet')

dream_model = define_deepdream(base_model)

def run_deep_dream_simple(img, steps=tf.constant(100), step_size=tf.constant(0.01)):
    img = tf.convert_to_tensor(img,dtype=tf.float32)
    img = tf.keras.applications.inception_v3.preprocess_input(img)
    loss, img = gradient_ascent(img, steps, step_size)
    result    = deprocess(img)
    return result

#original_img = np.array(PIL.Image.open('tiger.jpg'))
response = requests.get('https://static.bangkokpost.com/media/content/20190914/c1_1750054_190914182913.jpg')
original_img = np.array(PIL.Image.open(BytesIO(response.content)))
plt.figure()
plt.imshow(original_img)
plt.axis(False)
plt.show()

dream_img = run_deep_dream_simple(img=original_img,steps=tf.constant(100), step_size=tf.constant(0.01))
plt.figure()
plt.imshow(dream_img)
plt.axis(False)
plt.show()

OCTAVE_SCALE = 1.30

img = tf.convert_to_tensor(original_img, tf.float32)
base_shape = tf.shape(img)[:-1]
float_base_shape = tf.cast(base_shape, tf.float32)

for idx,n in enumerate(range(-2, 3)):
    new_shape = tf.cast(float_base_shape*(OCTAVE_SCALE**n), tf.int32)
    img = tf.image.resize(tf.cast(img,tf.float32), new_shape)
    img = run_deep_dream_simple(img, tf.constant(100), tf.constant(0.01))    

img = tf.image.resize(img, base_shape)
plt.figure()
plt.imshow(tf.cast(img,tf.uint8))
plt.axis(False)
plt.show()